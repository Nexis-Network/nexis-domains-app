{"version":3,"file":"static/js/Favourites.d202a82e-d5973.chunk.js","mappings":"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","sources":["components/Icons/LargeHeart.js","routes/Favourites.js","../node_modules/@apollo/src/react/components/Query.tsx"],"sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled/macro'\n\nconst LargeHeartContainer = styled('svg')``\n\nconst LargeHeart = () => (\n  <LargeHeartContainer\n    width=\"42\"\n    height=\"41\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M17.857 4.453C14.284.518 8.553.518 4.98 4.453l-.336.37C.452 9.44.452 16.984 4.642 21.598l16.16 17.8c.124.135.27.135.393-.001l16.16-17.799c4.194-4.617 4.193-12.156-.002-16.777l-.336-.37c-3.574-3.936-9.3-3.936-12.876 0l-1.373 1.512a2.372 2.372 0 0 1-3.538 0l-1.373-1.511z\"\n      stroke=\"#E7E7E7\"\n      strokeWidth=\"3\"\n      fill=\"none\"\n      fillRule=\"evenodd\"\n      opacity=\".7\"\n    />\n  </LargeHeartContainer>\n)\n\nexport default LargeHeart\n","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styled from '@emotion/styled/macro'\nimport { Query } from '@apollo/client/react/components'\nimport DomainItem from '../components/DomainItem/DomainItem'\nimport { getNamehash } from '@nexis-network/domains-ui'\nimport { useQuery } from '@apollo/client'\nimport { gql } from '@apollo/client'\n\nimport {\n  GET_FAVOURITES,\n  GET_SUBDOMAIN_FAVOURITES,\n  GET_OWNER,\n  GET_REGISTRATIONS_BY_IDS_SUBGRAPH,\n  GET_ERRORS\n} from '../graphql/queries'\n\nimport mq from 'mediaQuery'\nimport moment from 'moment'\n\nimport { H2 as DefaultH2 } from '../components/Typography/Basic'\nimport LargeHeart from '../components/Icons/LargeHeart'\nimport RenewAll from '../components/Address/RenewAll'\nimport Checkbox from '../components/Forms/Checkbox'\nimport { useAccount } from '../components/QueryAccount'\nimport { filterNormalised, normaliseOrMark } from '../utils/utils'\nimport {\n  NonMainPageBannerContainer,\n  DAOBannerContent\n} from '../components/Banner/DAOBanner'\nimport { InvalidCharacterError } from '../components/Error/Errors'\n\nconst SelectAll = styled('div')`\n  grid-area: selectall;\n  display: flex;\n  justify-content: flex-end;\n  padding-right: 40px;\n  margin: 2em 0;\n`\n\nconst NoDomainsContainer = styled('div')`\n  display: flex;\n  padding: 40px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: white;\n  box-shadow: 3px 4px 6px 0 rgba(229, 236, 241, 0.3);\n  border-radius: 6px;\n  margin-bottom: 40px;\n\n  h2 {\n    color: #adbbcd;\n    font-weight: 100;\n    margin-bottom: 0;\n    padding: 0;\n    margin-top: 20px;\n    text-align: center;\n    max-width: 500px;\n  }\n\n  p {\n    color: #2b2b2b;\n    font-size: 18px;\n    font-weight: 300;\n    margin-top: 20px;\n    line-height: 1.3em;\n    text-align: center;\n    max-width: 400px;\n  }\n`\n\nconst H2 = styled(DefaultH2)`\n  margin-top: 50px;\n  margin-left: 20px;\n  ${mq.medium`\n    margin-left: 0;\n  `}\n`\n\nconst NoDomains = () => {\n  const { t } = useTranslation()\n  return (\n    <NoDomainsContainer>\n      <LargeHeart />\n      <h2>{t('favourites.nofavouritesDomains.title')}</h2>\n      <p>{t('favourites.nofavouritesDomains.text')}</p>\n    </NoDomainsContainer>\n  )\n}\n\nfunction getAvailable(expiryDate) {\n  let e = moment(parseInt(expiryDate * 1000))\n  let e2 = moment().subtract(90, 'days')\n  return e2.diff(e) > 0\n}\n\nfunction getDomainState(owner, available) {\n  if (!owner || available) return 'Open'\n  return parseInt(owner, 16) === 0 ? 'Open' : 'Owned'\n}\n\nconst RESET_STATE_QUERY = gql`\n  query resetStateQuery @client {\n    networkId\n  }\n`\nexport const useResetState = (setYears, setCheckedBoxes, setSelectAll) => {\n  const {\n    data: { networkId }\n  } = useQuery(RESET_STATE_QUERY)\n  useEffect(() => {\n    setYears(1)\n    setCheckedBoxes({})\n    setSelectAll(null)\n  }, [networkId])\n}\n\nfunction Favourites() {\n  const { t } = useTranslation()\n  useEffect(() => {\n    document.title = 'ENS Favourites'\n  }, [])\n\n  let [years, setYears] = useState(1)\n  let [checkedBoxes, setCheckedBoxes] = useState({})\n  const [selectAll, setSelectAll] = useState(false)\n  const account = useAccount()\n\n  useResetState(setYears, setCheckedBoxes, setSelectAll)\n\n  const { data: { favourites: favouritesWithUnnormalised } = [] } = useQuery(\n    GET_FAVOURITES\n  )\n  useEffect(() => {\n    document.title = 'ENS Favourites'\n  }, [])\n\n  const { data: { subDomainFavourites } = [] } = useQuery(\n    GET_SUBDOMAIN_FAVOURITES\n  )\n  const {\n    data: { globalError }\n  } = useQuery(GET_ERRORS)\n  const favourites = normaliseOrMark(favouritesWithUnnormalised, 'name')\n  if (globalError.invalidCharacter || !favourites) {\n    return <InvalidCharacterError message={globalError.invalidCharacter} />\n  }\n  const ids =\n    favourites &&\n    favourites\n      .map(f => {\n        try {\n          return getNamehash(f.name)\n        } catch (e) {\n          console.error('Error getting favourite ids: ', e)\n          return null\n        }\n      })\n      ?.filter(x => x)\n\n  const { data: { registrations } = [], refetch } = useQuery(\n    GET_REGISTRATIONS_BY_IDS_SUBGRAPH,\n    {\n      variables: { ids },\n      fetchPolicy: 'no-cache',\n      nextFetchPolicy: 'no-cache',\n      context: {\n        queryDeduplication: false\n      }\n    }\n  )\n\n  if (!favourites || (favourites.length === 0 && !registrations)) {\n    return <NoDomains />\n  }\n  let favouritesList = []\n\n  if (favourites.length > 0) {\n    if (registrations && registrations.length > 0) {\n      favouritesList = favourites.map(f => {\n        try {\n          let r = registrations.filter(\n            a => a.domain.id === getNamehash(f.name)\n          )[0]\n          return {\n            name: f.name,\n            owner: r && r.registrant.id,\n            available: getAvailable(r && r.expiryDate),\n            expiryDate: r && r.expiryDate,\n            hasInvalidCharacter: f.hasInvalidCharacter\n          }\n        } catch (e) {\n          return {\n            name: f.name,\n            hasInvalidCharacter: true,\n            available: false,\n            expiryDate: false\n          }\n        }\n      })\n    } else {\n      // Fallback when subgraph is not returning result\n      favouritesList = favourites.map(f => {\n        return {\n          name: f.name,\n          hasInvalidCharacter: f.hasInvalidCharacter\n        }\n      })\n    }\n  }\n\n  const hasFavourites =\n    (favouritesList && favouritesList.length > 0) ||\n    (subDomainFavourites && subDomainFavourites.length > 0)\n  if (!hasFavourites) {\n    return (\n      <FavouritesContainer data-testid=\"favourites-container\">\n        <H2>{t('favourites.favouriteTitle')}</H2>\n        <NoDomains>\n          <LargeHeart />\n          <h2>{t('favourites.nofavouritesDomains.title')}</h2>\n          <p>{t('favourites.nofavouritesDomains.text')}</p>\n        </NoDomains>\n      </FavouritesContainer>\n    )\n  }\n\n  const selectedNames = Object.entries(checkedBoxes)\n    .filter(([key, value]) => value)\n    .map(([key]) => key)\n\n  const allNames = favouritesList.map(f => f.name)\n  const selectAllNames = () => {\n    const obj = favouritesList.reduce((acc, f) => {\n      if (f.expiryDate) {\n        acc[f.name] = true\n      }\n      return acc\n    }, {})\n    setCheckedBoxes(obj)\n  }\n  let data = []\n  const checkedOtherOwner =\n    favouritesList.filter(\n      f =>\n        f.expiryDate &&\n        f.owner !== account?.toLowerCase() &&\n        checkedBoxes[f.name]\n    ).length > 0\n  const canRenew = favouritesList.filter(f => f.expiryDate).length > 0\n  return (\n    <FavouritesContainer data-testid=\"favourites-container\">\n      <H2>{t('favourites.favouriteTitle')}</H2>\n      {canRenew && (\n        <>\n          <RenewAll\n            years={years}\n            setYears={setYears}\n            selectedNames={selectedNames}\n            setCheckedBoxes={setCheckedBoxes}\n            setSelectAll={setSelectAll}\n            allNames={allNames}\n            refetch={refetch}\n            data={data}\n            getterString=\"registrations\"\n            checkedOtherOwner={checkedOtherOwner}\n          />\n          <SelectAll>\n            <Checkbox\n              testid=\"checkbox-renewall\"\n              type=\"double\"\n              checked={selectAll}\n              onClick={() => {\n                if (!selectAll) {\n                  selectAllNames()\n                } else {\n                  setCheckedBoxes({})\n                }\n                setSelectAll(selectAll => !selectAll)\n              }}\n            />\n          </SelectAll>\n        </>\n      )}\n\n      {favouritesList &&\n        favouritesList.map(domain => {\n          return (\n            <DomainItem\n              domain={{\n                ...domain,\n                state: getDomainState(domain.owner, domain.available),\n                owner: domain.owner\n              }}\n              isFavourite={true}\n              checkedBoxes={checkedBoxes}\n              setCheckedBoxes={setCheckedBoxes}\n              setSelectAll={setSelectAll}\n              key={domain.name}\n              hasInvalidCharacter={domain.hasInvalidCharacter}\n            />\n          )\n        })}\n      {subDomainFavourites &&\n        subDomainFavourites.map(domain => (\n          <Query\n            query={GET_OWNER}\n            variables={{ name: domain.name }}\n            key={domain.name}\n          >\n            {({ loading, error, data }) => {\n              if (error)\n                return <div>{(console.log(error), JSON.stringify(error))}</div>\n              return (\n                <DomainItem\n                  loading={loading}\n                  domain={{\n                    ...domain,\n                    state: getDomainState(data?.getOwner, false),\n                    owner: data?.getOwner\n                  }}\n                  isSubDomain={true}\n                  isFavourite={true}\n                />\n              )\n            }}\n          </Query>\n        ))}\n    </FavouritesContainer>\n  )\n}\n\nconst FavouritesContainer = styled('div')`\n  padding-bottom: 60px;\n`\n\nexport default Favourites\n","import * as PropTypes from \"prop-types\";\nimport type * as ReactTypes from \"react\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport type { QueryComponentOptions } from \"./types.js\";\nimport { useQuery } from \"../hooks/index.js\";\n\n/**\n * @deprecated\n * Official support for React Apollo render prop components ended in March 2020.\n * This library is still included in the `@apollo/client` package,\n * but it no longer receives feature updates or bug fixes.\n */\nexport function Query<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  props: QueryComponentOptions<TData, TVariables>\n): ReactTypes.JSX.Element | null {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result as any) : null;\n}\n\nexport interface Query<TData, TVariables extends OperationVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool,\n} as Query<any, any>[\"propTypes\"];\n"],"names":["LargeHeartContainer","_styled","target","_jsx","width","height","xmlns","children","d","stroke","strokeWidth","fill","fillRule","opacity","SelectAll","name","styles","NoDomainsContainer","H2","DefaultH2","mq","medium","_templateObject","_taggedTemplateLiteral","NoDomains","t","useTranslation","_jsxs","LargeHeart","getAvailable","expiryDate","e","moment","parseInt","subtract","diff","getDomainState","owner","available","RESET_STATE_QUERY","gql","_templateObject2","useResetState","setYears","setCheckedBoxes","setSelectAll","networkId","useQuery","data","useEffect","FavouritesContainer","_favourites$map","document","title","_useState","useState","_useState2","_slicedToArray","years","_useState3","_useState4","checkedBoxes","_useState5","_useState6","selectAll","account","useAccount","_useQuery2$data","GET_FAVOURITES","favouritesWithUnnormalised","favourites","_useQuery3$data","GET_SUBDOMAIN_FAVOURITES","subDomainFavourites","globalError","GET_ERRORS","normaliseOrMark","invalidCharacter","InvalidCharacterError","message","ids","map","f","getNamehash","console","error","filter","x","_useQuery5","GET_REGISTRATIONS_BY_IDS_SUBGRAPH","variables","fetchPolicy","nextFetchPolicy","context","queryDeduplication","_useQuery5$data","registrations","refetch","length","favouritesList","r","a","domain","id","registrant","hasInvalidCharacter","selectedNames","Object","entries","_ref","_ref2","_ref3","allNames","checkedOtherOwner","toLowerCase","canRenew","_Fragment","RenewAll","getterString","Checkbox","testid","type","checked","onClick","obj","reduce","acc","selectAllNames","DomainItem","_objectSpread","state","isFavourite","Query","query","GET_OWNER","_ref5","loading","log","JSON","stringify","getOwner","isSubDomain","props","options","__rest","result","propTypes","client","PropTypes","isRequired","notifyOnNetworkStatusChange","onCompleted","onError","pollInterval","ssr","partialRefetch","returnPartialData"],"sourceRoot":""}