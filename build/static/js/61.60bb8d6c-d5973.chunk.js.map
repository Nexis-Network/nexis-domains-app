{"version":3,"file":"static/js/61.60bb8d6c-d5973.chunk.js","mappings":"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","sources":["components/ExpiryNotification/ExpiryNotifyDropdown.js","components/Address/RenewAll.js"],"sourcesContent":["import React, { createRef, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { CalendarButton } from '../Calendar/Calendar'\nimport Dropdown from '../Calendar/Dropdown'\nimport EmailNotifyLink from './EmailNotifyLink'\nimport Modal from '../Modal/Modal'\nimport ExpiryNotificationModal from './ExpiryNotificationModal'\nimport { useOnClickOutside } from 'components/hooks'\n\nconst ExpiryNotifyDropdownContainer = styled('div')`\n  position: relative;\n`\n\nexport default function ExpiryNotifyDropdown({ address }) {\n  const dropdownRef = createRef()\n  const togglerRef = createRef()\n  const [showDropdown, setShowDropdown] = useState(false)\n  const [showModal, setShowModal] = useState(false)\n  const { t } = useTranslation()\n\n  useOnClickOutside([dropdownRef, togglerRef], () => setShowDropdown(false))\n\n  const handleDropdownClick = () => {\n    setShowDropdown(value => !value)\n  }\n\n  const handleEmailNotifyClick = () => {\n    setShowModal(true)\n    setShowDropdown(false)\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false)\n  }\n\n  return (\n    <ExpiryNotifyDropdownContainer>\n      <CalendarButton ref={togglerRef} onClick={handleDropdownClick}>\n        {t('expiryNotification.reminder')}\n      </CalendarButton>\n      {showDropdown && (\n        <Dropdown ref={dropdownRef}>\n          <EmailNotifyLink\n            onClick={handleEmailNotifyClick}\n            key=\"email\"\n            address={address}\n          >\n            {t('c.email')}\n          </EmailNotifyLink>\n        </Dropdown>\n      )}\n      {showModal && (\n        <Modal closeModal={handleCloseModal}>\n          <ExpiryNotificationModal\n            {...{ address, onCancel: handleCloseModal }}\n          />\n        </Modal>\n      )}\n    </ExpiryNotifyDropdownContainer>\n  )\n}\n","import React, { useState } from 'react'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\nimport EthVal from 'ethval'\nimport mq from 'mediaQuery'\n\nimport { RENEW_DOMAINS } from '../../graphql/mutations'\nimport { GET_RENT_PRICES, GET_ETH_PRICE } from 'graphql/queries'\nimport { calculateDuration } from 'utils/dates'\nimport { useEditable } from '../hooks'\nimport { trackReferral } from '../../utils/analytics'\nimport { refetchTilUpdated } from '../../utils/graphql'\n\nimport PendingTx from '../PendingTx'\nimport DefaultButton from '../Forms/Button'\nimport SaveCancel from '../SingleName/SaveCancel'\nimport { PricerAll as PriceAllDefault } from '../SingleName/Pricer'\nimport ExpiryNotifyDropdown from '../ExpiryNotification/ExpiryNotifyDropdown'\n\nconst ActionsContainer = styled('div')`\n  align-items: start;\n  display: flex;\n  flex-direction: column;\n  grid-area: actions;\n  justify-content: flex-start;\n  > * {\n    margin: 10px 0 10px 0;\n  }\n  ${mq.small`\n    align-items: center; \n    flex-direction: row;\n    > * { \n      margin: 0 0 0 20px;\n    }\n  `}\n  ${mq.large`\n    justify-content: flex-end;\n  `}\n`\n\nconst RenewContainer = styled('div')`\n  grid-area: renew;\n  display: flex;\n  flex-direction: column;\n`\n\nconst RenewSelected = styled(DefaultButton)`\n  margin-right: 20px;\n  align-self: flex-start;\n`\n\nconst RenewPricer = styled(motion.div)`\n  background: #f0f6fa;\n  padding: 20px;\n  margin: 20px;\n  margin-left: 0;\n  display: flex;\n  flex-direction: column;\n`\n\nconst Buttons = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n`\n\nconst StyledPricer = styled(PriceAllDefault)``\n\nconst PricerAll = motion.custom(StyledPricer)\n\nconst ConfirmationList = styled('div')`\n  max-height: 500px;\n  overflow-y: scroll;\n`\n\nconst WarningMessage = styled('span')`\n  color: #f6412d;\n  margin-right: auto;\n  margin-bottom: 1em;\n  ${mq.small`\n    margin-bottom: 0em;\n  `}\n`\n\nfunction isValid(selectedNames) {\n  return selectedNames.length > 0\n}\n\nexport default function Renew({\n  selectedNames,\n  address,\n  allNames,\n  setCheckedBoxes,\n  setSelectAll,\n  refetch,\n  data,\n  getterString,\n  checkedOtherOwner\n}) {\n  let { t } = useTranslation()\n  const { state, actions } = useEditable()\n  const { editing, txHash, pending, confirmed } = state\n\n  const { startEditing, stopEditing, startPending, setConfirmed } = actions\n\n  const [years, setYears] = useState(1)\n  const {\n    data: { getEthPrice: ethUsdPrice } = {},\n    loading: ethUsdPriceLoading\n  } = useQuery(GET_ETH_PRICE)\n  const duration = calculateDuration(years)\n  let labelsToRenew = selectedNames.map(name => name.split('.')[0])\n\n  const { data: { getRentPrices } = {}, loading: loadingRentPrices } = useQuery(\n    GET_RENT_PRICES,\n    {\n      variables: {\n        labels: labelsToRenew,\n        duration\n      }\n    }\n  )\n\n  const [mutation] = useMutation(RENEW_DOMAINS, {\n    onCompleted: res => {\n      const txHash = Object.values(res)[0]\n      startPending(txHash)\n      if (getRentPrices && txHash && ethUsdPrice) {\n        trackReferral({\n          labels: labelsToRenew, // labels array\n          transactionId: txHash, //hash\n          type: 'renew', // renew/register\n          price: new EthVal(`${getRentPrices._hex}`)\n            .toEth()\n            .mul(ethUsdPrice)\n            .toFixed(2), // in wei\n          years\n        })\n      }\n    }\n  })\n\n  return (\n    <>\n      <ActionsContainer>\n        {!editing ? (\n          pending && !confirmed ? (\n            <PendingTx\n              txHash={txHash}\n              onConfirmed={() => {\n                setConfirmed()\n                refetchTilUpdated(\n                  refetch,\n                  300,\n                  'expiryDate',\n                  selectedNames[0],\n                  data,\n                  getterString\n                )\n                setCheckedBoxes({})\n                setSelectAll(false)\n              }}\n            />\n          ) : (\n            <>\n              {address && allNames.length > 0 ? (\n                <ExpiryNotifyDropdown address={address} />\n              ) : (\n                ''\n              )}\n              <RenewSelected\n                onClick={() => {\n                  if (labelsToRenew.length > 0) startEditing()\n                }}\n                type={labelsToRenew.length > 0 ? 'primary' : 'disabled'}\n              >\n                {t('address.renew.button')}\n              </RenewSelected>\n            </>\n          )\n        ) : null}\n      </ActionsContainer>\n\n      <RenewContainer>\n        {editing && (\n          <AnimatePresence>\n            <RenewPricer\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n            >\n              <PricerAll\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                labels={labelsToRenew}\n                years={years}\n                loading={loadingRentPrices}\n                price={getRentPrices}\n                setYears={setYears}\n                duration={duration}\n                ethUsdPriceLoading={ethUsdPriceLoading}\n                ethUsdPrice={ethUsdPrice || 0}\n              />\n              <Buttons>\n                {checkedOtherOwner && (\n                  <WarningMessage>\n                    *{t('singleName.expiry.cannotown')}\n                  </WarningMessage>\n                )}\n                <SaveCancel\n                  stopEditing={stopEditing}\n                  mutation={() => {\n                    let variables = {\n                      labels: labelsToRenew,\n                      duration\n                    }\n\n                    mutation({\n                      variables\n                    })\n                  }}\n                  mutationButton={t('address.renew.confirmButton')}\n                  confirm={true}\n                  isValid={isValid(selectedNames)}\n                  extraDataComponent={\n                    <ConfirmationList>\n                      {t('address.renew.confirm.0')}\n                      {'\\n'}\n                      <ul>\n                        {selectedNames.map((name, i) => (\n                          <li key={i}>{name}</li>\n                        ))}\n                      </ul>\n                      {t('address.renew.confirm.1')}\n                      {t('address.renew.year', { count: years })}\n                    </ConfirmationList>\n                  }\n                />\n              </Buttons>\n            </RenewPricer>\n          </AnimatePresence>\n        )}\n      </RenewContainer>\n    </>\n  )\n}\n"],"names":["ExpiryNotifyDropdownContainer","styled","_templateObject","_taggedTemplateLiteral","ExpiryNotifyDropdown","_ref","address","dropdownRef","createRef","togglerRef","_useState","useState","_useState2","_slicedToArray","showDropdown","setShowDropdown","_useState3","_useState4","showModal","setShowModal","t","useTranslation","useOnClickOutside","handleCloseModal","_jsxs","children","_jsx","CalendarButton","ref","onClick","value","Dropdown","EmailNotifyLink","Modal","closeModal","ExpiryNotificationModal","onCancel","ActionsContainer","_styled","target","mq","small","large","_templateObject2","RenewContainer","name","styles","RenewSelected","DefaultButton","RenewPricer","motion","div","Buttons","StyledPricer","PriceAllDefault","PricerAll","custom","ConfirmationList","WarningMessage","_templateObject3","isValid","selectedNames","length","Renew","allNames","setCheckedBoxes","setSelectAll","refetch","data","getterString","checkedOtherOwner","_useEditable","useEditable","state","actions","editing","txHash","pending","confirmed","startEditing","stopEditing","startPending","setConfirmed","years","setYears","_useQuery","useQuery","GET_ETH_PRICE","_useQuery$data","ethUsdPrice","getEthPrice","ethUsdPriceLoading","loading","duration","calculateDuration","labelsToRenew","map","split","_useQuery2","GET_RENT_PRICES","variables","labels","_useQuery2$data","getRentPrices","loadingRentPrices","_useMutation","useMutation","RENEW_DOMAINS","onCompleted","res","Object","values","trackReferral","transactionId","type","price","EthVal","concat","_hex","toEth","mul","toFixed","mutation","_Fragment","PendingTx","onConfirmed","refetchTilUpdated","AnimatePresence","initial","opacity","height","animate","exit","SaveCancel","mutationButton","confirm","extraDataComponent","i","count"],"sourceRoot":""}