{"version":3,"file":"static/js/TestRegistrar.431493c6-d5973.chunk.js","mappings":"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","sources":["graphql/localQueries.js","routes/TestRegistrar.js","../node_modules/@apollo/src/react/components/Mutation.tsx","../node_modules/@apollo/src/react/components/Query.tsx","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { gql } from '@apollo/client'\n\nexport const GET_WEB3 = gql`\n  query getweb3 @client {\n    accounts\n    isReadOnly\n  }\n`\n","import React, { Fragment, Component } from 'react'\nimport { Query, Mutation } from '@apollo/client/react/components'\nimport { gql } from '@apollo/client'\nimport { GET_WEB3 } from '../graphql/localQueries'\n\nconst GET_PENDING_TRANSACTIONS = gql`\n  query getPendingTransations {\n    pendingTransactions @client {\n      id\n      createdAt\n    }\n  }\n`\n\nconst GET_TRANSACTION_HISTORY = gql`\n  query getTransactionHistory {\n    transactionHistory @client {\n      id\n      createdAt\n    }\n  }\n`\n\nconst REGISTER_DOMAIN = gql`\n  mutation registerTestDomain($name: String!) {\n    registerTestDomain(name: $name) @client {\n      id\n    }\n  }\n`\n\nconst RegisterSubdomain = ({ setTx }) => {\n  let input\n\n  return (\n    <Mutation mutation={REGISTER_DOMAIN}>\n      {registerTestDomain => (\n        <div>\n          <form\n            onSubmit={e => {\n              e.preventDefault()\n              registerTestDomain({ variables: { name: input.value } }).then(\n                txId => {\n                  console.log(txId)\n                }\n              )\n              input.value = ''\n            }}\n          >\n            <input\n              ref={node => {\n                input = node\n              }}\n            />\n            <button type=\"submit\">Register subdomain</button>\n          </form>\n        </div>\n      )}\n    </Mutation>\n  )\n}\n\nclass TestRegistrar extends Component {\n  state = {\n    started: false\n  }\n  render() {\n    return (\n      <Fragment>\n        <Query query={GET_WEB3} pollInterval={500}>\n          {({ loading, error, data }) => {\n            if (loading) return <div>Loading web3</div>\n            const { web3, people } = data\n            console.log(data)\n            return (\n              <Fragment>\n                <div>\n                  {web3.accounts.length > 0\n                    ? `Your NZT address is ${web3.accounts[0]}`\n                    : 'Unlock metamask!'}\n                </div>\n                <div>{console.log(people)}</div>\n                <RegisterSubdomain />\n              </Fragment>\n            )\n          }}\n        </Query>\n        <Query query={GET_PENDING_TRANSACTIONS}>\n          {({ data, loading }) => {\n            const { pendingTransactions } = data\n            if (loading) return <div>Loading pending txs</div>\n            console.log(data)\n            return (\n              <div>\n                <h2>Pending Transactions</h2>\n                {pendingTransactions.map(tx => (\n                  <li tx={tx.id}>\n                    <a href={`http://ropsten.etherscan.io/tx/${tx.id}`}>\n                      {tx.id}\n                    </a>\n                  </li>\n                ))}\n              </div>\n            )\n          }}\n        </Query>\n        <Query query={GET_TRANSACTION_HISTORY}>\n          {({ data, loading }) => {\n            const { transactionHistory } = data\n            if (loading) return <div>Loading pending txs</div>\n            console.log(data)\n            return (\n              <div>\n                <h2>Transaction History</h2>\n                {transactionHistory.map(tx => (\n                  <li key={tx.id}>\n                    <a href={`http://ropsten.etherscan.io/tx/${tx.id}`}>\n                      {tx.id}\n                    </a>\n                  </li>\n                ))}\n              </div>\n            )\n          }}\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default TestRegistrar\n","import * as PropTypes from \"prop-types\";\nimport type * as ReactTypes from \"react\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport type { MutationComponentOptions } from \"./types.js\";\nimport { useMutation } from \"../hooks/index.js\";\n\n/**\n * @deprecated\n * Official support for React Apollo render prop components ended in March 2020.\n * This library is still included in the `@apollo/client` package,\n * but it no longer receives feature updates or bug fixes.\n */\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n): ReactTypes.JSX.Element | null {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport interface Mutation<TData, TVariables> {\n  propTypes: PropTypes.InferProps<MutationComponentOptions<TData, TVariables>>;\n}\n\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    ),\n    PropTypes.func,\n  ]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string,\n} as Mutation<any, any>[\"propTypes\"];\n","import * as PropTypes from \"prop-types\";\nimport type * as ReactTypes from \"react\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport type { QueryComponentOptions } from \"./types.js\";\nimport { useQuery } from \"../hooks/index.js\";\n\n/**\n * @deprecated\n * Official support for React Apollo render prop components ended in March 2020.\n * This library is still included in the `@apollo/client` package,\n * but it no longer receives feature updates or bug fixes.\n */\nexport function Query<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  props: QueryComponentOptions<TData, TVariables>\n): ReactTypes.JSX.Element | null {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result as any) : null;\n}\n\nexport interface Query<TData, TVariables extends OperationVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool,\n} as Query<any, any>[\"propTypes\"];\n","import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = { called: false, loading: false, client };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["GET_WEB3","gql","_templateObject","_taggedTemplateLiteral","GET_PENDING_TRANSACTIONS","GET_TRANSACTION_HISTORY","_templateObject2","REGISTER_DOMAIN","_templateObject3","RegisterSubdomain","_ref","input","setTx","_jsx","Mutation","mutation","children","registerTestDomain","_jsxs","onSubmit","e","preventDefault","variables","name","value","then","txId","console","log","ref","node","type","TestRegistrar","_Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","state","started","_inherits","_createClass","key","Fragment","Query","query","pollInterval","_ref2","loading","data","error","web3","people","accounts","_ref3","pendingTransactions","map","tx","id","href","_ref4","transactionHistory","Component","props","_a","useMutation","runMutation","result","propTypes","PropTypes","isRequired","optimisticResponse","refetchQueries","awaitRefetchQueries","update","onCompleted","onError","fetchPolicy","options","__rest","useQuery","client","notifyOnNetworkStatusChange","ssr","partialRefetch","returnPartialData","useApolloClient","verifyDocumentType","DocumentType","React","called","setResult","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","__assign","ignoreResults","clientOptions","mergeOptions","mutate","response","errors","ApolloError","graphQLErrors","result_1","equal","_b","result_2","reset","result_3"],"sourceRoot":""}